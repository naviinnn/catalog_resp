# dto/catalog.py

class Catalog:
    """
    Data Transfer Object (DTO) for a Catalog item.

    Encapsulates catalog properties to ensure consistent data structure
    when passing data between service, API, and potentially UI layers.
    """
    def __init__(self, name: str, description: str, start_date: str, end_date: str, status: str, catalog_id: int = None):
        """
        Initializes a new Catalog object.

        Args:
            name (str): The name of the catalog.
            description (str): A description of the catalog.
            start_date (str): The start date of the catalog in YYYY-MM-DD format.
            end_date (str): The end date of the catalog in YYYY-MM-DD format.
            status (str): The current status of the catalog (e.g., 'active', 'inactive').
            catalog_id (int, optional): The unique ID of the catalog. Auto-generated by DB for new entries.
                                        Defaults to None for new catalogs.
        """
        self.catalog_id = catalog_id
        self.name = name
        self.description = description
        self.start_date = start_date
        self.end_date = end_date
        self.status = status

    def to_dict(self) -> dict:
        """
        Converts the Catalog object to a dictionary.

        This method is useful for serializing the object into a format
        suitable for JSON responses from the API.

        Returns:
            dict: A dictionary representation of the Catalog object.
        """
        return {
            'catalog_id': self.catalog_id,
            'catalog_name': self.name,
            'catalog_description': self.description,
            'start_date': self.start_date,
            'end_date': self.end_date,
            'status': self.status
        }